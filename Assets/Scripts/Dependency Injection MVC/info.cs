//MVC на Dependency Injection (реализовано на фреймворке Adic).

//Объект Root создаёт синглтон-инстанс Controller-класса, привязывая интерфейсы к нему. Во View-классах интерфейсы объявляются с атрибутом Inject, а в Start-ах View-классов производится инъекция объявленных интерфейсов посредством extension-метода Inject, расширяющего MonoBehavior. Преимущество перед компонентным подходом - есть точка входа и нельзя обратиться к объекту до его создания. Однако здесь мы, как и в случае с синглтоном, привязываем интерфейс к его реализации.

//Возможен вариант - гибридный подход, смесь DI с компонентным подходом. Для этого нужно добавить GameObject с MonoBehavior-Controller-ом и связь в контейнере оформить в виде
// Bind<интерфейс>().To(геймобжект-с-классом-реализующим-интерфейс.GetComponent<интерфейс>())
//Тогда мы получим, как и в компонентном подходе, возможность менять на геймобжекте компонент с нужными интерфейсами, без необходимости после этого менять что-либо в коде.
